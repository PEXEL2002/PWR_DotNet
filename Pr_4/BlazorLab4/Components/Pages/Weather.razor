@page "/weather"
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>
<input class="form-control mb-2" placeholder="Filtruj po opisie pogody..." @oninput="@Input" value="@filterText" />
<button class="btn btn-primary me-2" @onclick="() => WarmDaysFilter(15)">Pokaż tylko ciepłe dni</button>
<button class="btn btn-secondary" @onclick="Restore">Przywróć wszystkie</button>
@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p><strong>Liczba ciepłych dni (powyżej 15°C):</strong> @warmDays</p>

    <table class="table mt-3">
        <thead>
            <tr>
                <th>Data</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Opis</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? originalForecasts;
    private WeatherForecast[]? forecasts;
    private int warmDays = 0;
    private string filterText = "";
    private bool onlyWarm = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };

        originalForecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();

        forecasts = originalForecasts.ToArray();
        warmDays = forecasts.Count(f => f.TemperatureC > 15);
    }

    private void ApplyFilters()
    {
        if (originalForecasts == null) return;

        forecasts = originalForecasts
            .Where(f =>
                (!onlyWarm || f.TemperatureC > 15) &&
                (string.IsNullOrWhiteSpace(filterText) || f.Summary?.Contains(filterText, StringComparison.OrdinalIgnoreCase) == true)
            )
            .ToArray();
    }

    private void WarmDaysFilter(int threshold)
    {
        onlyWarm = true;
        ApplyFilters();
    }

    private void Restore()
    {
        onlyWarm = false;
        filterText = "";
        ApplyFilters();
    }

    private void Input(ChangeEventArgs arg)
    {
        filterText = arg.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
